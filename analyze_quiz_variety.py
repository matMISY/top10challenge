#!/usr/bin/env python3
"""
Script pour analyser la vari√©t√© des quiz dans le dossier v3 et cr√©er des fichiers organis√©s par difficult√©
"""

import json
import os
from collections import defaultdict, Counter
from datetime import datetime
from pathlib import Path

def load_quiz_files():
    """Charge tous les fichiers JSON de quiz."""
    data_dir = Path("data")
    quiz_files = {}
    
    if not data_dir.exists():
        print("‚ùå Dossier 'data' non trouv√©")
        return {}
    
    for file_path in data_dir.glob("REBALANCED_*.json"):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                quiz_files[file_path.name] = data
                print(f"‚úÖ Charg√©: {file_path.name} ({data.get('total_quizzes', 0)} quiz)")
        except Exception as e:
            print(f"‚ùå Erreur lecture {file_path.name}: {e}")
    
    return quiz_files

def analyze_themes(all_quizzes):
    """Analyse la distribution des th√®mes."""
    themes = Counter(quiz['theme'] for quiz in all_quizzes)
    
    print("\nüìä DISTRIBUTION DES TH√àMES:")
    print("=" * 50)
    for theme, count in themes.most_common():
        percentage = (count / len(all_quizzes)) * 100
        print(f"{theme:20} : {count:3d} quiz ({percentage:5.1f}%)")
    
    return themes

def analyze_competitions(all_quizzes):
    """Analyse la distribution des comp√©titions."""
    competitions = Counter()
    
    for quiz in all_quizzes:
        comp = quiz.get('difficulty', {}).get('details', {}).get('competition')
        if comp:
            competitions[comp] += 1
    
    print("\nüèÜ DISTRIBUTION DES COMP√âTITIONS:")
    print("=" * 50)
    for comp, count in competitions.most_common():
        percentage = (count / len(all_quizzes)) * 100
        print(f"{comp:25} : {count:3d} quiz ({percentage:5.1f}%)")
    
    return competitions

def analyze_question_types(all_quizzes):
    """Analyse les types de questions."""
    question_types = Counter()
    
    for quiz in all_quizzes:
        q_type = quiz.get('difficulty', {}).get('details', {}).get('question_type')
        if q_type:
            question_types[q_type] += 1
    
    print("\n‚ùì TYPES DE QUESTIONS:")
    print("=" * 50)
    for q_type, count in question_types.most_common():
        percentage = (count / len(all_quizzes)) * 100
        print(f"{q_type:20} : {count:3d} quiz ({percentage:5.1f}%)")
    
    return question_types

def analyze_temporal_distribution(all_quizzes):
    """Analyse la distribution temporelle."""
    years = []
    temporal_spans = Counter()
    
    for quiz in all_quizzes:
        details = quiz.get('difficulty', {}).get('details', {})
        temporal_span = details.get('temporal_span')
        ref_year = details.get('reference_year')
        
        if temporal_span:
            temporal_spans[temporal_span] += 1
        
        if ref_year:
            years.append(ref_year)
    
    print("\nüìÖ DISTRIBUTION TEMPORELLE:")
    print("=" * 50)
    
    if years:
        years_counter = Counter(years)
        print("Ann√©es de r√©f√©rence les plus fr√©quentes:")
        for year, count in years_counter.most_common(10):
            percentage = (count / len(years)) * 100
            print(f"  {year} : {count:3d} quiz ({percentage:5.1f}%)")
        
        print(f"\nPlage temporelle: {min(years)} - {max(years)}")
        print(f"Ann√©e m√©diane: {sorted(years)[len(years)//2]}")
    
    return temporal_spans, years

def analyze_difficulty_distribution(all_quizzes):
    """Analyse la distribution des difficult√©s."""
    difficulty_scores = Counter()
    difficulty_levels = Counter()
    
    for quiz in all_quizzes:
        diff = quiz.get('difficulty', {})
        score = diff.get('score')
        level = diff.get('level')
        
        if score:
            difficulty_scores[score] += 1
        if level:
            difficulty_levels[level] += 1
    
    print("\n‚≠ê DISTRIBUTION DES DIFFICULT√âS:")
    print("=" * 50)
    
    print("Par niveau:")
    for level, count in difficulty_levels.most_common():
        percentage = (count / len(all_quizzes)) * 100
        print(f"  {level:15} : {count:3d} quiz ({percentage:5.1f}%)")
    
    print("\nPar score:")
    for score, count in sorted(difficulty_scores.items()):
        percentage = (count / len(all_quizzes)) * 100
        print(f"  Score {score:2d}      : {count:3d} quiz ({percentage:5.1f}%)")
    
    return difficulty_scores, difficulty_levels

def analyze_answer_variety(all_quizzes):
    """Analyse la vari√©t√© des r√©ponses."""
    nationalities = Counter()
    players = Counter()
    
    for quiz in all_quizzes:
        answers = quiz.get('answers', [])
        for answer in answers:
            nationality = answer.get('nationality')
            name = answer.get('name')
            
            if nationality:
                nationalities[nationality] += 1
            if name:
                players[name] += 1
    
    print("\nüåç VARI√âT√â DES R√âPONSES:")
    print("=" * 50)
    
    print(f"Nationalit√©s uniques: {len(nationalities)}")
    print("Top 10 nationalit√©s:")
    for nat, count in nationalities.most_common(10):
        print(f"  {nat:15} : {count:3d} occurrences")
    
    print(f"\nJoueurs uniques: {len(players)}")
    print("Joueurs les plus fr√©quents:")
    for player, count in players.most_common(10):
        print(f"  {player:25} : {count:2d} occurrences")
    
    return nationalities, players

def generate_summary_report(quiz_files, all_quizzes):
    """G√©n√®re un rapport de synth√®se."""
    total_quizzes = len(all_quizzes)
    
    print("\n" + "=" * 60)
    print("üìã RAPPORT DE SYNTH√àSE")
    print("=" * 60)
    
    print(f"üìÅ Fichiers analys√©s: {len(quiz_files)}")
    for filename, data in quiz_files.items():
        print(f"   ‚Ä¢ {filename}: {data.get('total_quizzes', 0)} quiz")
    
    print(f"\nüìä Total quiz analys√©s: {total_quizzes}")
    
    # Calcul de la vari√©t√©
    themes = set(quiz['theme'] for quiz in all_quizzes)
    competitions = set()
    question_types = set()
    
    for quiz in all_quizzes:
        details = quiz.get('difficulty', {}).get('details', {})
        comp = details.get('competition')
        q_type = details.get('question_type')
        
        if comp:
            competitions.add(comp)
        if q_type:
            question_types.add(q_type)
    
    print(f"\nüéØ Indicateurs de vari√©t√©:")
    print(f"   ‚Ä¢ Th√®mes uniques: {len(themes)}")
    print(f"   ‚Ä¢ Comp√©titions uniques: {len(competitions)}")
    print(f"   ‚Ä¢ Types de questions uniques: {len(question_types)}")
    
    # Score de vari√©t√© (simple)
    variety_score = len(themes) + len(competitions) + len(question_types)
    print(f"\n‚≠ê Score de vari√©t√©: {variety_score}/100")
    
    if variety_score < 30:
        print("   üî¥ Vari√©t√© faible - Recommand√© d'ajouter plus de diversit√©")
    elif variety_score < 60:
        print("   üü° Vari√©t√© moyenne - Possibilit√© d'am√©lioration")
    else:
        print("   üü¢ Bonne vari√©t√©")

def analyze_v3_structure():
    """Analyse la structure des fichiers v3"""
    v3_path = "data/v3"
    
    if not os.path.exists(v3_path):
        print("‚ùå Dossier data/v3 introuvable")
        return
        
    files = [f for f in os.listdir(v3_path) if f.endswith('.json')]
    print(f"üìÅ {len(files)} fichiers JSON trouv√©s dans v3/")
    
    total_quizzes = 0
    difficulty_distribution = Counter()
    theme_distribution = Counter()
    
    for filename in files:
        filepath = os.path.join(v3_path, filename)
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            file_quizzes = len(data.get('quizzes', []))
            total_quizzes += file_quizzes
            
            print(f"\nüìÑ {filename}:")
            print(f"   Quizzes: {file_quizzes}")
            
            # Analyse des difficult√©s et th√®mes
            for quiz in data.get('quizzes', []):
                difficulty = quiz.get('difficulty', 0)
                theme = quiz.get('theme', 'Unknown')
                difficulty_distribution[difficulty] += 1
                theme_distribution[theme] += 1
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la lecture de {filename}: {e}")
    
    print(f"\nüìä R√âSUM√â:")
    print(f"Total quizzes: {total_quizzes}")
    print(f"\nDistribution par difficult√©:")
    for diff in sorted(difficulty_distribution.keys()):
        print(f"  Niveau {diff}: {difficulty_distribution[diff]} quizzes")
    
    print(f"\nDistribution par th√®me:")
    for theme, count in theme_distribution.most_common():
        print(f"  {theme}: {count} quizzes")

def convert_difficulty_to_level_name(difficulty_num):
    """Convertit un niveau de difficult√© num√©rique vers le nom de niveau pour l'organisation des fichiers"""
    
    difficulty_mapping = {
        1: "tres_facile",
        2: "facile", 
        3: "facile",
        4: "moyen",
        5: "difficile",
        6: "tres_difficile"
    }
    
    return difficulty_mapping.get(difficulty_num, "moyen")

def transform_quizzes():
    """Transforme les quiz v3 au format attendu par l'app"""
    v3_path = "data/v3"
    
    if not os.path.exists(v3_path):
        print("‚ùå Dossier data/v3 introuvable")
        return
    
    # Grouper par difficult√©
    quizzes_by_difficulty = defaultdict(list)
    
    files = [f for f in os.listdir(v3_path) if f.endswith('.json')]
    
    for filename in files:
        filepath = os.path.join(v3_path, filename)
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            for quiz in data.get('quizzes', []):
                difficulty_num = quiz.get('difficulty', 3)
                difficulty_level_name = convert_difficulty_to_level_name(difficulty_num)
                
                # Transformer le quiz au nouveau format simplifi√©
                transformed_quiz = {
                    "id": quiz.get('id'),
                    "title": quiz.get('title'),
                    "theme": quiz.get('theme'),
                    "difficulty": difficulty_num,  # Difficult√© simple de 1 √† 6
                    "answers": []
                }
                
                # Transformer les r√©ponses avec le nouveau champ hint
                for answer in quiz.get('answers', []):
                    transformed_answer = {
                        "name": answer.get('name'),
                        "nationality": answer.get('nationality'),
                        "hint": answer.get('hint', '')  # Nouveau champ hint pour les indices
                    }
                    transformed_quiz["answers"].append(transformed_answer)
                
                quizzes_by_difficulty[difficulty_level_name].append(transformed_quiz)
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la transformation de {filename}: {e}")
    
    # Cr√©er les fichiers finaux
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    for difficulty_level_name, quizzes in quizzes_by_difficulty.items():
        # R√©assigner les IDs de mani√®re s√©quentielle
        for i, quiz in enumerate(quizzes, 1):
            quiz["id"] = i
        
        # Format de sortie simplifi√©
        output_data = {
            "generated_at": datetime.now().isoformat(),
            "total_quizzes": len(quizzes),
            "quizzes": quizzes
        }
        
        filename = f"CONVERTED_V3_{timestamp}_{difficulty_level_name}.json"
        filepath = os.path.join("data", filename)
        
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ Cr√©√©: {filepath} ({len(quizzes)} quizzes)")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'√©criture de {filepath}: {e}")

def main():
    """Fonction principale."""
    print("üîç Analyse de la structure v3...")
    analyze_v3_structure()
    
    print(f"\n{'='*50}")
    print("üîÑ Transformation des quiz...")
    transform_quizzes()
    
    print(f"\n‚úÖ Transformation termin√©e!")

if __name__ == "__main__":
    main()